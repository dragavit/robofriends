{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","blabla","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAgBeA,EAdF,SAAC,GAA2B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,GAC1B,OACI,cADI,CACJ,OAAKC,UAAU,sDAAf,cACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cADzB,IAEI,gCACI,6BAAKF,IACL,4BAAIC,WCoBLK,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIhB,OACE,8BAEGA,EAAOC,KAAI,SAACC,EAAQC,GACjB,OAEE,aADA,CACC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCCNC,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCGPI,EAVA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAGR,aADA,CACA,OAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKN,EAAMO,YCgBJC,E,kDAnBX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACjBC,KAAKJ,MAAM,CAAEC,UAAU,M,oBAG/B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,4DAEJG,KAAKb,MAAMO,a,GAhBEO,aCkEbC,G,wDAxDX,aAAc,IAAD,8BACT,gBAsBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,QAC1CpB,QAAQC,IAAIe,EAAMG,OAAOC,QAvBzB,EAAKZ,MAAQ,CAETnB,OAAQ,GAER6B,YAAa,IAEjBlB,QAAQC,IAAI,eARH,E,qDAYb,WAAoB,IAAD,OAEfoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAE5B,OAAQoC,OACvCzB,QAAQC,IAAI,uB,oBAWhB,WACI,MAAgCW,KAAKJ,MAA7BnB,EAAR,EAAQA,OAAQ6B,EAAhB,EAAgBA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GAEjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAI1D,OAFC7B,QAAQC,IAAI,UAELZ,EAAO0C,OAGN,sBAAK9C,UAAU,MAAf,cACI,oBAAIA,UAAU,KAAd,yBAGA,cAAC,EAAD,CAAWS,aAAckB,KAAKG,iBAJlC,IAOI,cAAC,EAAD,UACI,eAAC,EAAD,eACK,cAAC,EAAD,CAAU1B,OAAQqC,IADvB,YAVhB,oBAAIzC,UAAU,KAAd,2B,GAvCU4B,cCCHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDX,M","file":"static/js/main.3ccc80f1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ( { name, email, id } ) => { // прямо внутри параметра можно делать destructuring, чтобы внизу не писать props.id, props.name, props.email; другой способ - строкой ниже написать  const { name, email, id } = props;, но так лучше\r\n    return( // return должен быть один элемент, и это <div>\r\n        <div className='tx bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'> {/*  text centered, background light green, dib border 3, padding 3, margins 2, grow (animation) */}\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} /> {/* поскольку это JS expression, то опять заворачиваем в curly brackets; используем teplate string */}\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","// CARDLIST.JS ДЕЛАЕТ LOOP ПО ТОМУ, ЧТО ПОЛУЧАЕТ, И ЗАПОЛНЯЕТ CARDS.JS\r\n\r\nimport React from 'react';\r\nimport Card from './Card';\r\n// CardList component lists cards, all we need to do is pass it a prop of robots\r\nconst CardList = ({ robots }) => { // параметр может как угодно называться, но в App.js в него передается { robots }\r\n    // if (true) { //чтобы выдавало ошибку через ErrorBoundry (но у меня не)\r\n    //   throw new Error(\"Noooo!\");\r\n    // }\r\n    return (\r\n      <div>\r\n       {\r\n         robots.map((blabla, i) => { // i - index, первый параметр не используется, поэтому blabla\r\n            return (\r\n              // ПЕРЕДАЕМ ПО ОТДЕЛЬНОСТИ PROPERTY КАЖДОГО ЭЛЕМЕНТА ROBOTS В CARDS\r\n              <Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n                />\r\n            );\r\n          })\r\n       }\r\n      </div>  \r\n    ) \r\n}   \r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => { // у Андрея первым параметром был searchfield, но он не нужен\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue' // \r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange} // onChange в HTML execute a JavaScript when a user changes the selected option\r\n            // когда происходит onChange событие, оно передается в searchChange function, а оттуда наверх в APP.JS в onSearchChange\r\n            // каждый раз, когда срабатывает событие, к функции добавляются () - она активируется\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => { // Scroll wrapped CardList, поэтому CardList - Children\r\n    console.log(props) // Object, у которого в children будет указано CardList\r\n    return (\r\n        //  первая скобка - JS expression, вторая - returning an object\r\n        <div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}> \r\n            {props.children}\r\n        </div> \r\n    )\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\n// ДЕЛАЕМ РОДИТЕЛЬСКИЙ ЭЛЕМЕНТ, КОТОРЫЙ БУДЕТ ЛОВИТЬ ОШИБКИ CHILDREN\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) { // new lifecycle method from React 16. If anything errors out, it will run this lifecycle hook\r\n            this.state({ hasError: true }) // а если true, то срабатывает код ниже после условия if\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) { // это значит if (this.state.hasError) === true\r\n            return <h1>Ooops. That is not working</h1>\r\n        }\r\n        return this.props.children // если нет ошибки на верхнем уровне врэпинга, тогда появится children \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react'; // destucruring, чтобы потом удобно было использовать\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n//КАК ЭТО РАБОТАЕТ\r\n//Каждый раз, когда мы что-то вводим, это автоматически попадает в onChange tag в SearchBox.js, затем это передается в searchChange и ,соответственно, затем в onSearchChange(), которое передает введеное в searchfield\r\n// затем, в зависимости от того, что в serachfield, фильтруется список роботов\r\n// т.е. сначала SearchBox сообщает инфу вверх App.js, а затем App.js передаёт изменения в CardList.js\r\nclass App extends Component {\r\n    // ВСТАВИМ STATE\r\n    constructor(){\r\n        super() // calls the constructor of Component\r\n        this.state = { //state is something that can change and affect our app; it has 2 states: robots and searchfield\r\n            //если функция ничего не передает, то мы не делаем this.state = state (котоой нет), а просто так указываем\r\n            robots: [],\r\n            // раньше было так: robots: robots, // создаем дубликат роботов в объекте state, который потом будет фильтровать через .filter()\r\n            searchfield: ''\r\n        } // virtual DOM is just a JS object. Virtual DOM is an object that collects the state and React uses this state to render and pass them down as props to the components which are pure function and the components render it\r\n        console.log('constructor');\r\n    } // state.robots в данном примере можно не делать, а использовать просто robots, но в других надо, поэтому надо всегда так\r\n\r\n    // ЗАГРУЗИМ ВЕСЬ СПИСОК РОБОТОВ СО СТОРОННЕГО САЙТА\r\n    componentDidMount(){ // no arrow functions sinde it's a part of React\r\n        // идет по ссылке, получает response, этот response загоняет в .json(), затем оттуда users приписывает переменной robots\r\n        fetch('https://jsonplaceholder.typicode.com/users') // fetch is a part of Window object, that's why nothing is attached to it\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots: users}));\r\n        console.log('componentDidMount') // в консоли выдаст constructor-render-componentDidMount-render\r\n        // render запустится во второй раз, потому что мы updated the state\r\n    }\r\n\r\n    // ЗАПОЛНИМ SEARCHFIELD ВВЕДЕННОЙ ИНФОРМАЦИЕЙ\r\n    // введенная информация идет по пути: onChange > searchChane >> onSearchChange \r\n    onSearchChange = (event) => { // обязательно в таких случаях использовать arrow function, иначе будет ошибка\r\n        this.setState({ searchfield: event.target.value}) // setState() это метод React, его нужно использовать, чтобы изменять state\r\n        console.log(event.target.value); // gives us the value of the search item\r\n    }\r\n    // ОТФИЛЬТРУЕМ РОБОТОВ ПО ИМЕНИ СОГЛАСНО ВВЕДЕННОЙ ИНФЕ В SEARCHFIELD И ВЫВЕДЕМ РЕЗУЛЬТАТ\r\n    render() { //render обязателен для Component и он обязательно должен return \r\n        const { robots, searchfield } = this.state; // сделаем destructuring чтобы писать потом не this.state.robots, а просто robots\r\n        const filteredRobots = robots.filter(robot => {\r\n            //if the name of the robots in lower case includes (встроенная функция) то, что в searchfield в lower case\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase()) //переведем все в lower case - good for comparison\r\n        })\r\n        console.log('render');\r\n        // НА СЛУЧАЙ, ЕСЛИ НЕТ РОБОТОВ (ИЛИ НЕ ЗАГРУЗИЛИСЬ), ВЫДАДИМ LOADING\r\n       return !robots.length ? // ternary operator + !; то же самое, что if (robots.length === 0) return... else\r\n        <h1 className='tc'> Loading </h1> :\r\n         (\r\n                <div className=' tc'> {/* tc - text centered */}\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    {/* onChange=searchChange=this.onSearchChange */}\r\n                    {/*  onChange получает то, что вводим, присваивает это searchChange, и это автоматически присваивается onSearchChange */}\r\n                    <SearchBox searchChange={this.onSearchChange}/> {/* SearchBox component */}\r\n                    {/* Scroll component for wrapping the cardlist - чтобы был в топе при прокрутке вниз. Раз создав любой компонент, его можно использовать во многих местах - в этом сила React */}\r\n                   {/* ЗАВЕРНЕМ CARDLIST (будет children) В SCROLL */}\r\n                    <Scroll> \r\n                        <ErrorBoundary> {/* заворачиваем в ErrorBoundary, который ловит ошибки и выдает Ooops. Если нет ошибок, тогда <Cardlist..>  */}\r\n                             <CardList robots={filteredRobots}/> {/* вместо обычного {robots}  */}\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App; // export default - экспортируется целиком","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root')); // сначала здесь рендерились роботы, затем - CardList, затем - App\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}